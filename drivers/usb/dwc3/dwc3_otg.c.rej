--- dwc3_otg.c	2015-12-21 03:46:59.644722000 +0100
+++ dwc3_otg.c	2015-12-24 04:00:39.000000000 +0100
@@ -31,11 +31,27 @@
 static int max_chgr_retry_count = MAX_INVALID_CHRGR_RETRY;
 module_param(max_chgr_retry_count, int, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(max_chgr_retry_count, "Max invalid charger retry count");
+
+//Module param for aca enabling
+static bool aca_enable = 0;
+module_param(aca_enable, bool, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(aca_enable, "Enable ACA host mode to allow charging and host");
+
+//Define absent ID_A flag (from msm_otg module)
+#define ID_A    2
+
+//Flag for choosing either ID(host w/ vbus) or ID_A (host w/ charge) based on aca_enable toggle
+int ID_MODE;
+
 static void dwc3_otg_reset(struct dwc3_otg *dotg);
 
 static void dwc3_otg_notify_host_mode(struct usb_otg *otg, int host_mode);
 static void dwc3_otg_reset(struct dwc3_otg *dotg);
 
+#ifdef CONFIG_BQ24196_CHARGER
+extern void bq24196_wait_for_resume(void);
+#endif
+
 /**
  * dwc3_otg_set_host_regs - reset dwc3 otg registers to host operation.
  *
@@ -196,26 +212,30 @@ static int dwc3_otg_start_host(struct us
 	if (!dwc->xhci)
 		return -EINVAL;
 
-	if (!dotg->vbus_otg) {
-		dotg->vbus_otg = devm_regulator_get(dwc->dev->parent,
-							"vbus_dwc3");
-		if (IS_ERR(dotg->vbus_otg)) {
-			dev_err(dwc->dev, "Failed to get vbus regulator\n");
-			ret = PTR_ERR(dotg->vbus_otg);
-			dotg->vbus_otg = 0;
-			return ret;
+	if (ID_MODE == ID) {
+		if (!dotg->vbus_otg) {
+			dotg->vbus_otg = devm_regulator_get(dwc->dev->parent,
+								"vbus_dwc3");
+			if (IS_ERR(dotg->vbus_otg)) {
+				dev_err(dwc->dev, "Failed to get vbus regulator\n");
+				ret = PTR_ERR(dotg->vbus_otg);
+				dotg->vbus_otg = 0;
+				return ret;
+			}
 		}
 	}
 
 	if (on) {
 		dev_dbg(otg->phy->dev, "%s: turn on host\n", __func__);
 
-		dwc3_otg_notify_host_mode(otg, on);
-		ret = regulator_enable(dotg->vbus_otg);
-		if (ret) {
-			dev_err(otg->phy->dev, "unable to enable vbus_otg\n");
-			dwc3_otg_notify_host_mode(otg, 0);
-			return ret;
+		if (ID_MODE == ID) {
+			dwc3_otg_notify_host_mode(otg, on);
+			ret = regulator_enable(dotg->vbus_otg);
+			if (ret) {
+				dev_err(otg->phy->dev, "unable to enable vbus_otg\n");
+				dwc3_otg_notify_host_mode(otg, 0);
+				return ret;
+			}
 		}
 
 		/*
